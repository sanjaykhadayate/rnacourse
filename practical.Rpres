```{r setup, include=FALSE}
opts_chunk$set(cache=TRUE)
```


RNASeq Practical
========================================================
author: CSC Bioinformatics Core
date: 17 December 2015
width: 1640
height: 1200
autosize: true
font-import: <link href='http://fonts.googleapis.com/css?family=Slabo+27px' rel='stylesheet' type='text/css'>
font-family: 'Slabo 27px', serif;
css:style.css


Contents
====================================
- Building index
- Splice aware alignment
- Quality assessment
- Assigning reads to genomic features
- Differential gene expression analysis
- Exploring and saving results
- Differential splicing analysis
- Gene ontology and pathway enrichment analysis


External libraries
====================================

```{r,eval=TRUE,echo=TRUE}
### load libraries

library(Rsubread)
library(limma)
library(edgeR)
library(DESeq2)
library(goseq)
library("RColorBrewer")
library(ggplot2)
library(KEGG.db)
library("org.Mm.eg.db")
library(gplots)
```

Analysis Parameters
========================================================

```{r,eval=TRUE,echo=TRUE}
#  Define analysis parameters

genome<-"mm9" 
strandspecific<-0 
factor1<-"Group"
dir="/Users/skhadaya/Downloads/sratoolkit.2.5.5-mac64/bin/"
isPairedEnd<-TRUE
nthreads=8
```


Reading sample data
========================================================
```{r,eval=TRUE,echo=TRUE}
# Read in target file using a funcion from limma package

targets <- readTargets("targets.txt")

  
```

========================================================
```{r,eval=TRUE,echo=TRUE}

targets

```

========================================================

```{r,eval=TRUE,echo=TRUE}
# Get full path names of raw data files


read1=paste0(dir,targets$InputFile)

read2=paste0(dir,targets$InputFile2)

```

========================================================

```{r,eval=TRUE,echo=TRUE}


read1[1]

read2[1]

```

========================================================

```{r,eval=TRUE,echo=TRUE}

# get the directory with rsubread genome index

index="SubreadIndex/mm9_index"

```

Building index
========================================================

```{r,eval=FALSE,echo=TRUE}
We will use rsubread package to perform read alignment and counting.

#  Step 1: Index building

ref <- system.file("extdata","reference.fa",package="Rsubread")

buildindex(basename="reference_index",reference=ref)

```

Read Alignment
========================================================

```{r,eval=FALSE,echo=TRUE}
# align reads using subjunc function of rsubreads package

if (isPairedEnd == TRUE)
{
  subjunc(index=index,
  readfile1=read1,
  readfile2=read2,
  input_format="gzFASTQ",
  output_format="BAM",
  output_file=targets$OutputFile,
  nthreads=nthreads,
  unique=TRUE,
  indels=5)
}
```

========================================================

```{r,eval=FALSE,echo=TRUE}
  
else {
  subjunc(index=index,
  readfile1=read1,
  input_format="gzFASTQ",
  output_format="BAM",
  output_file=targets$OutputFile,
  useMetaFeatures=TRUE,
  nthreads=nthreads,
  unique=TRUE,
  indels=5)
}
```

Quality Assessment
========================================================

```{r,eval=TRUE,echo=TRUE,message=FALSE,results='hide',warning=FALSE}

# Quality scores give the probabilities of read bases being incorrectly called, which is useful for examining the quality of sequencing data. 

# Base quality scores
qscore <- qualityScores(filename=read1[1],offset=33,nreads=1000)

```

========================================================

```{r,eval=TRUE,echo=TRUE}
plot(colMeans(qscore),ylim=c(0,40))

```

========================================================

```{r,eval=TRUE,echo=TRUE}
# GC content

# The basewise calculation is useful for examining the GC bias towards the base position in the read.

atgc<-atgcContent(filename=read1[1],basewise = TRUE)

plot(atgc[1,],col="red",ylim=c(0,0.4),ylab="content")
points(atgc[2,],col="green")
points(atgc[3,],col="yellow")
points(atgc[4,],col="brown")
legend("topright", legend=c("A", "T","G","C"), col=c("red","green","yellow","brown"), pch=15)

```

========================================================


```{r,eval=TRUE,echo=TRUE}
# produce alignment statistics

propmapped(targets$OutputFile[1])


```

Counting Reads
========================================================

```{r,eval=TRUE,echo=TRUE,message=FALSE,results='hide',warning=FALSE}
# count numbers of reads mapped to genes

anno_for_featurecount<-"genes.gtf"

fc <-featureCounts(
files=targets$OutputFile,
annot.ext=anno_for_featurecount,
isGTFAnnotationFile=TRUE,
GTF.featureType="exon",
GTF.attrType="gene_id",
nthreads=nthreads,
strandSpecific=strandspecific,
isPairedEnd=isPairedEnd)
                              
```

========================================================

```{r,eval=TRUE,echo=TRUE,message=FALSE,results='hide',warning=FALSE}

head(fc$counts)

```


========================================================

```{r,eval=TRUE,echo=TRUE}  
  # collect sample information
                              
 colData<-cbind(targets$OutputFile,targets$Group,targets$Batch)
 
rownames(colData)<-colData[,1]
colnames(colData)<-c("name","Group","Batch")
                             
colData<-data.frame(colData)
```

========================================================

```{r,eval=TRUE,echo=TRUE}  
  
 colData
 
 
```

Prepare deseqdataset object
========================================================

```{r,eval=TRUE,echo=TRUE}   
 # The class used by the DESeq2 package to store the read counts is DESeqDataSet
 
# construct deseqdataset object
 
  dds<-DESeqDataSetFromMatrix(
 countData= fc$counts,colData=targets,
 design=~Group)
                           
```

Differential expression analysis
========================================================

```{r,eval=TRUE,echo=TRUE}
 
# The standard differential expression analysis steps are wrapped into a single function, DESeq
# Perform normalization, fitting to the model
 
    dds<-DESeq(dds)
 
 
  
```



========================================================

```{r,eval=TRUE,echo=TRUE}
# The function DESeq runs the following functions in order:
   
# 1. estimation of size factors: 
#  estimateSizeFactors()

# The sizeFactors vector assigns to each column of the count matrix a value, the size factor, such that  count  values  in  the  columns  can  be  brought  to  a  common  scale  by  dividing  by  the  corresponding size factor.

sizeFactors(dds)

```

========================================================

```{r,eval=TRUE,echo=TRUE}

# 2. estimation of dispersion: 
#  estimateDispersions()

# This function obtains dispersion estimates for Negative Binomial distributed data.

head(dispersions(dds))

plotDispEsts(dds)

```

========================================================

```{r,eval=TRUE,echo=TRUE}
# 3. Negative Binomial GLM fitting and Wald statistics: 
#  nbinomWaldTest()

# This function tests for significance of coefficients in a Negative Binomial GLM, using previously calculated sizeFactors (or normalizationFactors ) and dispersion estimates.

```

Transformation of count data
========================================================

```{r,eval=TRUE,echo=TRUE}

# The function rlog , stands for regularized log , transforming the original count data to the log2 scale

      rld<-rlog(dds)  

```

Principal component plot of the samples
========================================================

```{r,eval=TRUE,echo=TRUE}
      plotPCA(rld, intgroup="Group")
    
```


Heatmap of sample to sample distances
========================================================

```{r,eval=TRUE,echo=TRUE}   


      # The assay function is used to extract the matrix of normalized values
rlogcount <- assay(rld)
      
rlogcount <- rlogcount[!rowSums(rlogcount) == 0,]

colnames(rlogcount) <-  paste0(colData(dds)$sample)                          
sampleDists <- as.matrix(dist(t(rlogcount)))
 showcols <- brewer.pal(8, "Dark2")[1:length(unique(colData(dds)$Group))]
         
```

========================================================

```{r,eval=FALSE,echo=TRUE}
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=showcols[colData(dds)$Group], 
RowSideColors=showcols[colData(dds)$Group],
margin=c(10, 10), main="Sample Distance Matrix")
```

========================================================

```{r,eval=TRUE,echo=FALSE}
heatmap.2(as.matrix(sampleDists), key=F, trace="none",
col=colorpanel(100, "black", "white"),
ColSideColors=showcols[colData(dds)$Group], 
RowSideColors=showcols[colData(dds)$Group],
margin=c(10, 10), main="Sample Distance Matrix")
```


Exporting results
========================================================

```{r,eval=TRUE,echo=TRUE}    
 
 # Results tables are generated using the function results , which extracts a results table with log2 fold changes, p  values and adjusted p values
 
    res<-results(dds) 
 # Order results by adjusted p value 
 
        resOrdered<-res[order(res$padj),]
    
      write.table(resOrdered,file="DEgenes.txt",sep="\t")
      
```

========================================================

```{r,eval=TRUE,echo=TRUE}

  summary(res)
  
  # How many adjusted p-values were less than 0.1?
sum(res$padj < 0.1, na.rm=TRUE)
  
```

Exploring results
========================================================

```{r,eval=FALSE,echo=TRUE}
      # MA plot
      
  # The  function plotMA shows  the  log2  fold  changes  attributable  to  a  given  variable  over  the  mean of normalized counts.  Points will be colored red if the adjusted p value is less than 0.1.  Points which fall out of the window are plotted as open triangles pointing either up or down.
      
    plotMA(res, main="DESeq2", ylim=c(-4,4))
    

```


========================================================

```{r,eval=TRUE,echo=FALSE}
      # MA plot
      
      
    plotMA(res, main="DESeq2", ylim=c(-4,4))
    

```


========================================================

```{r,eval=TRUE,echo=TRUE}
      # Plot counts
    
    plotCounts(dds,gene=which.min(res$padj),intgroup="Group")

```


Multi factor designs
========================================================

```{r,eval=TRUE,echo=TRUE}
      
#   Experiments  with  more  than  one  factor  influencing  the  counts  can  be  analyzed  using  design  formula  that  include  the  additional  variables. 

targets

```



========================================================

```{r,eval=TRUE,echo=TRUE}
      
ddsMF<-DESeqDataSetFromMatrix(countData= fc$counts,colData= colData,design=~ Batch + Group)
      
ddsMF <- DESeq(ddsMF)

resMF <- results(ddsMF)

```



========================================================

```{r,eval=TRUE,echo=TRUE}

resMForder<-resMF[order(resMF$padj),]
head(resMForder)

```

========================================================

```{r,eval=TRUE,echo=TRUE}

# It  is  also  possible  to  retrieve  the  log2  fold  changes, p values  and  adjusted p values  of  the Batch variable

resMFbatch <- results(ddsMF, contrast=c("Batch","a","b"))
resMFbatchOrder<-resMFbatch[order(resMFbatch$padj),]
head(resMFbatchOrder)

```

========================================================

```{r,eval=TRUE,echo=TRUE}

summary(resMFbatch)
```


Likelyhood Ratio Test
========================================================

```{r,eval=FALSE,echo=TRUE}


DESeq2 offers  two  kinds  of  hypothesis  tests:  
  1. The  Wald  test,  where  we  use  the  estimated  standard  error  of a  log2  fold  change  to  test  if  it  is  equal  to  zero.
  2. the  likelihood  ratio  test  (LRT).  
  The  LRT  examines  two models  for  the  counts,  a full model  with  a  certain  number  of  terms  and  a
reduced model,  in  which  some  of the terms of the full model are removed.  
The test determines if the increased likelihood of the data using the extra terms in the full model is more than expected if those extra terms are truly zero.

```

========================================================

```{r,eval=FALSE,echo=TRUE}

The LRT is therefore useful for testing multiple terms at once, for example testing 3 or more levels of a factor
at once, or all interactions between two variables.  
The likelihood ratio test can be specified using the test argument to DESeq , which substitutes
nbinomWaldTest with nbinomLRT.  In  this  case,  the  user  needs  to  provide  a  reduced  formula,  e.g.   one  in  which  a  number  of terms  from design(dds) are  removed.  

```

DESeq using LRT
========================================================

```{r,eval=TRUE,echo=TRUE,message=FALSE,results='hide',warning=FALSE}

ddsLRT<-DESeqDataSetFromMatrix(countData= fc$counts,colData= colData,design=~ Batch + Group)
      
ddsLRT <- DESeq(ddsLRT, test="LRT", full=~Batch+ Group, reduced=~Group)

resLRT<-results(ddsLRT)

resLRTorder<-resLRT[order(resLRT$padj),]

```

========================================================

```{r,eval=TRUE,echo=TRUE}
head(resLRTorder)

```

========================================================

```{r,eval=TRUE,echo=TRUE}
summary(resLRT)


```


Differential splicing analysis
========================================================

```{r,eval=TRUE,echo=TRUE,message=FALSE,results='hide',warning=FALSE}
  

 # Perform exon level read counting 

fcexo<-featureCounts(files=targets$OutputFile,
 annot.ext=anno_for_featurecount,
 strandSpecific=strandspecific,
isGTFAnnotationFile=TRUE,
GTF.featureType="exon",
GTF.attrType="gene_id",
nthreads=8,
isPairedEnd=isPairedEnd,
useMetaFeatures=FALSE, 
allowMultiOverlap=TRUE)
                           
```

========================================================

```{r,eval=TRUE,echo=TRUE}
   # assemble all the counts into an edgeR DGEList object:
       
   dge <-DGEList(counts=fcexo$counts, genes=fcexo$annotation)

     dim(dge)

```

========================================================

```{r,eval=TRUE,echo=TRUE}

  head(dge$genes) 

```

========================================================

```{r,eval=TRUE,echo=TRUE}
  # Filtering step  
  # Keep exons that have more than 10 cpm in total
  
        sumall <- rowSums(dge$counts)
        dge<-dge[sumall>10,,keep.lib.sizes=FALSE]
        
```

========================================================

```{r,eval=TRUE,echo=TRUE}
  # Apply TMM normalization
        
        dge <- calcNormFactors(dge)
                          
       dge$sample

```

========================================================

```{r,eval=TRUE,echo=TRUE}
#  A multi-dimensional scaling plot can be used to find the presence
# of outlier samples in our experiment.
       
  plotMDS(dge, labels=1:6, col=as.numeric(colData$Group), main="MDS plot")
  legend("topright", legend=c("Viv", "Hfd"), col=1:2, pch=15)
    

```

========================================================

```{r,eval=FALSE,echo=TRUE}
  # Create design matrix
         design <- model.matrix(~targets$Group)
        design
         
  # Apply voom to convert the read counts to log2-cpm with associated weights:
         
        v <- voom(dge,design,plot=TRUE)
        
```


========================================================

```{r,eval=TRUE,echo=FALSE}
  # Create design matrix
         design <- model.matrix(~targets$Group)
         design
  # Apply voom to convert the read counts to log2-cpm with associated weights:
         
        v <- voom(dge,design,plot=TRUE)
        
```


========================================================

```{r,eval=TRUE,echo=TRUE}
  # Linear modelling
        
fit <- lmFit(v,design)
                          
  # Test for differences in exon retention
ex <- diffSplice(fit, geneid="GeneID")

```

========================================================

```{r,eval=TRUE,echo=FALSE}

# We can plot all the exons for the most differentially spliced genes

# This plot highlights exons that are individually significant 
# in that they have fold changes larger or smaller than most other exons.

plotSplice(ex, geneid="ENSMUSG00000035875", genecol="GeneID")

```


========================================================

```{r,eval=TRUE,echo=FALSE}



plotSplice(ex, geneid="ENSMUSG00000079507", genecol="GeneID",FDR=0.05)

```

========================================================

```{r,eval=TRUE,echo=TRUE}
   # Rank genes by evidence of differential splicing                       
    spliced<-topSplice(ex,coef=2,test="F")

   spliced
   
```

========================================================

```{r,eval=TRUE,echo=TRUE}
    #   Show individual exons that are enriched or depleted relative to other exons in the same gene.
    
  altUsed<-topSplice(ex,coef=2,test="t")

```

========================================================

```{r,eval=TRUE,echo=TRUE}
   
altUsed
  
```

========================================================

```{r,eval=FALSE,echo=TRUE}
   #  Save results
  
write.table(spliced,file="AltSplicedgenes.txt",sep="\t")
  
write.table(altUsed,file="DiffUsedExons.txt",sep="\t")
                              
```

Gene Ontology and Pathway Enrichment Analysis
========================================================

```{r,eval=TRUE,echo=TRUE}
    

# We will perform GO analysis using goseq package.

# In order to perform a GO analysis of your RNA-seq data,goseq only requires a simple named vector, which contains two pieces of information.

# 1. Measured genes
# all genes for which RNA-seq data was gathered for your experiment.  Each element of your vector should be named by a unique gene identifier.

# 2.Differentially expressed genes
# each element of your vector should be either a 1 or 0, where 1 indicates that the gene is differentially expressed and 0 that it is not.

```

========================================================

```{r,eval=TRUE,echo=TRUE}
 resdat<- resOrdered[complete.cases(resOrdered$padj),]
     degenes<-as.integer(resdat$padj<0.05)
    names(degenes)<-rownames(resdat)
    
    # remove duplicate gene names
  degenes<-degenes[match(unique(names(degenes)),names(degenes))]
  table(degenes)
```

========================================================
```{r,eval=TRUE,echo=TRUE}                         
   # fitting the probability weighting function (PWF)
# We first need to obtain a weighting for each gene, depending on its length, given by the PWF
  
   pwf=nullp(degenes,genome,'ensGene',plot.fit = FALSE)
   
  
```

========================================================

```{r,eval=TRUE,echo=TRUE}
  head(pwf)
```

========================================================

```{r,eval=TRUE,echo=TRUE}
   plotPWF(pwf)
```

========================================================
```{r,eval=TRUE,echo=TRUE}
    # change the Keggpath id to name in the goseq output
                              
    xx <- as.list(KEGGPATHID2NAME)
    temp <- cbind(names(xx),unlist(xx))
    
    addKeggTogoseq <- function(JX,temp){
      for(l in 1:nrow(JX)){
     if(JX[l,1] %in% temp[,1]){
     JX[l,"term"] <- temp[temp[,1] %in% JX[l,1],2]
      JX[l,"ontology"] <- "KEGG"
                         }
                 }
      return(JX)
    }
```

========================================================
```{r,eval=TRUE,echo=TRUE}
    
#  Calculate  the  over  and  under  expressed  GO
# categories among DE genes

functional_analysis=goseq(pwf,genome,
'ensGene',test.cats=c("GO:BP","GO:MF","KEGG"))
  
```

========================================================
```{r,eval=TRUE,echo=TRUE}
head(functional_analysis)

```

========================================================
```{r,eval=TRUE,echo=TRUE}

restemp<-addKeggTogoseq(functional_analysis,temp)   

    head(restemp)
    
```


========================================================
```{r,eval=TRUE,echo=TRUE}
write.table(restemp,file="GO_Kegg_Wallenius.txt", row.names=F,sep="\t")
                              
```

Session Information
========================================================
```{r,eval=FALSE,echo=TRUE}
    sessionInfo()
```

